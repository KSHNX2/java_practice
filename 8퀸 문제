package Chap4_스택과큐;

import java.util.Arrays;
import java.util.Random;
import java.util.Stack;

public class Queen_cp {
	static int[][] arr = new int[8][8];
	static Random random = new Random();
	static Stack<int[]> stack = new Stack<>();
	static int[] index = new int[2];
	public static void setQueen(int q) {
		int i = random.nextInt(8);
		int j = random.nextInt(8);
		index[0] = i;
		index[1] = j;
		arr[i][j] = q;
		stack.push(index);
		System.out.println("setQueen 실행 스택의 헤드값 : " + stack.peek()[0] + "," + stack.peek()[1]);
	}
	public static void removeStraight(int q) {
		System.out.println("가로세로를 제거합니다." + stack.peek()[0] + "," + stack.peek()[1]);
		for (int a = 0; a < 8; a++) {
			arr[stack.peek()[0]][a] = q;
			arr[a][stack.peek()[1]] = q;
		}
	}
	public static void printarr() {

		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {

				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}
	public static void resetarr() {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				arr[i][j] = 0;
			}
		}
		stack.clear();
	}
	public static void removeStraightDiagonal(int q) {
		System.out.println("가로세로를 제거합니다." + stack.peek()[0] + "," + stack.peek()[1]);
		for (int a = 0; a < 8; a++) {
			arr[stack.peek()[0]][a] = q;
			arr[a][stack.peek()[1]] = q;
		}
		System.out.println("대각선을 제거합니다." + stack.peek()[0] + "," + stack.peek()[1]);
		int drd = stack.peek()[0];
		for (int a = stack.peek()[1]; a < 8; a++) {
			if (drd > 7)
				break;
			arr[drd][a] = q;
			drd++;
		}
		int dru = stack.peek()[0];
		for (int a = stack.peek()[1]; a < 8; a++) {
			if (dru < 0)
				break;
			arr[dru][a] = q;
			dru--;
		}
		int dld = stack.peek()[1];
		for (int a = stack.peek()[0]; a < 8; a++) {
			if (dld < 0)
				break;
			arr[a][dld] = q;
			dld--;
		}
		int dlu = stack.peek()[1];
		for (int a = stack.peek()[0]; a >= 0; a--) {
			if (dlu < 0)
				break;
			arr[a][dlu] = q;
			dlu--;
		}
	}
	public static boolean nextQueenSet(int q) {
		if (q == 1) {
			resetarr();
			int i = random.nextInt(8);
			int j = random.nextInt(8);
			index[0] = i;
			index[1] = j;
			arr[0][0] = 1;
			stack.push(index);
			System.out.println("첫번째 퀸의 위치 : " + stack.peek()[0] + "," + stack.peek()[1]);
			return false;
		}
		while (true) {
			int i = random.nextInt(8);
			int j = random.nextInt(8);
			if (check()) {
				Queenslocation();
				return true;
			} else if (arr[i][j] == 0) {
				arr[i][j] = q;
				int[] index = { i, j };
				stack.push(index);
				System.out.println(q + "번째 퀸의 위치 arr[" + i + "][" + j + "]=" + arr[i][j]);
				break;
			}
		}
		return false;
	}

	private static boolean check() {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++)
				if (arr[i][j] == 0) {
					return false;
					// 배열에 0이 있으면 false
				}
		}
		System.out.println("배열에 0이 없습니다.");
		return true;
		// 배열에 0이 없으면 중단을 위해 true
	}

	public static void Queenslocation() {
		System.out.println("퀸의 위치를 출력합니다.");
		int temp;
		int peek1;
		int peek2;
		while (true) {
			temp = arr[stack.peek()[0]][stack.peek()[1]];
			System.out.println(stack.peek()[0] + "," + stack.peek()[1] + ":" + temp);
			peek1 = stack.peek()[0];
			peek2 = stack.peek()[1];
			for (int i = 0; i < 8; i++) {
				for (int j = 0; j < 8; j++) {
					if (arr[i][j] == temp) {
						arr[i][j] = 0;
						if (i == peek1 && j == peek2) {
							arr[i][j] = temp;
							stack.pop();
						}
					}

				}
			}
			if (stack.empty()) {
				printarr();
				break;
			}
		}
	}

	public static void main(String[] args) {
		int a;
		while (true) {

			for (a = 1; a < 9; a++) {
				if (nextQueenSet(a)) {
					a = 1;
					break;
				}
				removeStraightDiagonal(a);
				printarr();
				System.out.println("a의 값" + a);
			}
			if (a == 8)
				break;
		}

	}

}
